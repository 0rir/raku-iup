## Enumerations

# == /usr/include/iup/iup.h ==

enum  is export (
   IUP_RECBINARY => 0,
   IUP_RECTEXT => 1
);
## Structures


# == &lt;builtin&gt; ==

class __NSConstantString_tag is repr('CStruct') is export {
	has Pointer[int32]                $.isa; # const int* isa
	has int32                         $.flags; # int flags
	has Str                           $.str; # const char* str
	has long                          $.length; # long int length
}
class __va_list_tag is repr('CStruct') is export {
	has uint32                        $.gp_offset; # unsigned int gp_offset
	has uint32                        $.fp_offset; # unsigned int fp_offset
	has Pointer                       $.overflow_arg_area; # void* overflow_arg_area
	has Pointer                       $.reg_save_area; # void* reg_save_area
}

# == /usr/include/iup/iup.h ==

class Ihandle_ is repr('CStruct') is export {
}
## Extras stuff

constant __NSConstantString is export := __NSConstantString_tag;
constant Ihandle is export := Ihandle_;
## Functions


# == /usr/include/iup/iup.h ==

#-From /usr/include/iup/iup.h:37
#IUP_API int       IupOpen          (int *argc, char ***argv);
sub IupOpen(Pointer[int32]                $argc # int*
           ,Pointer[Pointer[Str]]         $argv # char***
            ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:38
#IUP_API void      IupClose         (void);
sub IupClose(
             ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:39
#IUP_API int       IupIsOpened      (void);
sub IupIsOpened(
                ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:41
#IUPIMGLIB_API void IupImageLibOpen(void);
sub IupImageLibOpen(
                    ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:43
#IUP_API int       IupMainLoop      (void);
sub IupMainLoop(
                ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:44
#IUP_API int       IupLoopStep      (void);
sub IupLoopStep(
                ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:45
#IUP_API int       IupLoopStepWait  (void);
sub IupLoopStepWait(
                    ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:46
#IUP_API int       IupMainLoopLevel (void);
sub IupMainLoopLevel(
                     ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:47
#IUP_API void      IupFlush         (void);
sub IupFlush(
             ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:48
#IUP_API void      IupExitLoop      (void);
sub IupExitLoop(
                ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:49
#IUP_API void      IupPostMessage   (Ihandle* ih, const char* s, int i, double d, void* p);
sub IupPostMessage(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                  ,Str                           $s # const char*
                  ,int32                         $i # int
                  ,num64                         $d # double
                  ,Pointer                       $p # void*
                   ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:51
#IUP_API int       IupRecordInput(const char* filename, int mode);
sub IupRecordInput(Str                           $filename # const char*
                  ,int32                         $mode # int
                   ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:52
#IUP_API int       IupPlayInput(const char* filename);
sub IupPlayInput(Str $filename # const char*
                 ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:54
#IUP_API void      IupUpdate        (Ihandle* ih);
sub IupUpdate(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:55
#IUP_API void      IupUpdateChildren(Ihandle* ih);
sub IupUpdateChildren(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                      ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:56
#IUP_API void      IupRedraw        (Ihandle* ih, int children);
sub IupRedraw(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,int32                         $children # int
              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:57
#IUP_API void      IupRefresh       (Ihandle* ih);
sub IupRefresh(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
               ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:58
#IUP_API void      IupRefreshChildren(Ihandle* ih);
sub IupRefreshChildren(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                       ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:60
#IUP_API int       IupExecute(const char *filename, const char* parameters);
sub IupExecute(Str                           $filename # const char*
              ,Str                           $parameters # const char*
               ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:61
#IUP_API int       IupExecuteWait(const char *filename, const char* parameters);
sub IupExecuteWait(Str                           $filename # const char*
                  ,Str                           $parameters # const char*
                   ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:62
#IUP_API int       IupHelp(const char* url);
sub IupHelp(Str $url # const char*
            ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:63
#IUP_API void      IupLog(const char* type, const char* format, ...);
sub IupLog(Str                           $type # const char*
          ,Str                           $format # const char*
           ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:65
#IUP_API char*     IupLoad          (const char *filename);
sub IupLoad(Str $filename # const char*
            ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:66
#IUP_API char*     IupLoadBuffer    (const char *buffer);
sub IupLoadBuffer(Str $buffer # const char*
                  ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:68
#IUP_API char*     IupVersion       (void);
sub IupVersion(
               ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:69
#IUP_API char*     IupVersionDate   (void);
sub IupVersionDate(
                   ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:70
#IUP_API int       IupVersionNumber (void);
sub IupVersionNumber(
                     ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:71
#IUP_API void      IupVersionShow   (void);
sub IupVersionShow(
                   ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:73
#IUP_API void      IupSetLanguage   (const char *lng);
sub IupSetLanguage(Str $lng # const char*
                   ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:74
#IUP_API char*     IupGetLanguage   (void);
sub IupGetLanguage(
                   ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:75
#IUP_API void      IupSetLanguageString(const char* name, const char* str);
sub IupSetLanguageString(Str                           $name # const char*
                        ,Str                           $str # const char*
                         ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:76
#IUP_API void      IupStoreLanguageString(const char* name, const char* str);
sub IupStoreLanguageString(Str                           $name # const char*
                          ,Str                           $str # const char*
                           ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:77
#IUP_API char*     IupGetLanguageString(const char* name);
sub IupGetLanguageString(Str $name # const char*
                         ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:78
#IUP_API void      IupSetLanguagePack(Ihandle* ih);
sub IupSetLanguagePack(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                       ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:80
#IUP_API void      IupDestroy      (Ihandle* ih);
sub IupDestroy(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
               ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:81
#IUP_API void      IupDetach       (Ihandle* child);
sub IupDetach(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:82
#IUP_API Ihandle*  IupAppend       (Ihandle* ih, Ihandle* child);
sub IupAppend(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,Ihandle_                      $child # Typedef<Ihandle>->«Ihandle_»*
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:83
#IUP_API Ihandle*  IupInsert       (Ihandle* ih, Ihandle* ref_child, Ihandle* child);
sub IupInsert(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,Ihandle_                      $ref_child # Typedef<Ihandle>->«Ihandle_»*
             ,Ihandle_                      $child # Typedef<Ihandle>->«Ihandle_»*
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:84
#IUP_API Ihandle*  IupGetChild     (Ihandle* ih, int pos);
sub IupGetChild(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
               ,int32                         $pos # int
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:85
#IUP_API int       IupGetChildPos  (Ihandle* ih, Ihandle* child);
sub IupGetChildPos(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                  ,Ihandle_                      $child # Typedef<Ihandle>->«Ihandle_»*
                   ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:86
#IUP_API int       IupGetChildCount(Ihandle* ih);
sub IupGetChildCount(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                     ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:87
#IUP_API Ihandle*  IupGetNextChild (Ihandle* ih, Ihandle* child);
sub IupGetNextChild(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                   ,Ihandle_                      $child # Typedef<Ihandle>->«Ihandle_»*
                    ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:88
#IUP_API Ihandle*  IupGetBrother   (Ihandle* ih);
sub IupGetBrother(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                  ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:89
#IUP_API Ihandle*  IupGetParent    (Ihandle* ih);
sub IupGetParent(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:90
#IUP_API Ihandle*  IupGetDialog    (Ihandle* ih);
sub IupGetDialog(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:91
#IUP_API Ihandle*  IupGetDialogChild(Ihandle* ih, const char* name);
sub IupGetDialogChild(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                     ,Str                           $name # const char*
                      ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:92
#IUP_API int       IupReparent     (Ihandle* ih, Ihandle* new_parent, Ihandle* ref_child);
sub IupReparent(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
               ,Ihandle_                      $new_parent # Typedef<Ihandle>->«Ihandle_»*
               ,Ihandle_                      $ref_child # Typedef<Ihandle>->«Ihandle_»*
                ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:94
#IUP_API int       IupPopup         (Ihandle* ih, int x, int y);
sub IupPopup(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
            ,int32                         $x # int
            ,int32                         $y # int
             ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:95
#IUP_API int       IupShow          (Ihandle* ih);
sub IupShow(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:96
#IUP_API int       IupShowXY        (Ihandle* ih, int x, int y);
sub IupShowXY(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,int32                         $x # int
             ,int32                         $y # int
              ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:97
#IUP_API int       IupHide          (Ihandle* ih);
sub IupHide(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:98
#IUP_API int       IupMap           (Ihandle* ih);
sub IupMap(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
           ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:99
#IUP_API void      IupUnmap         (Ihandle* ih);
sub IupUnmap(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
             ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:101
#IUP_API void      IupResetAttribute(Ihandle* ih, const char* name);
sub IupResetAttribute(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                     ,Str                           $name # const char*
                      ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:102
#IUP_API int       IupGetAllAttributes(Ihandle* ih, char** names, int n);
sub IupGetAllAttributes(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                       ,Pointer[Str]                  $names # char**
                       ,int32                         $n # int
                        ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:103
#IUP_API void      IupCopyAttributes(Ihandle* src_ih, Ihandle* dst_ih);
sub IupCopyAttributes(Ihandle_                      $src_ih # Typedef<Ihandle>->«Ihandle_»*
                     ,Ihandle_                      $dst_ih # Typedef<Ihandle>->«Ihandle_»*
                      ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:104
#IUP_API Ihandle*  IupSetAtt(const char* handle_name, Ihandle* ih, const char* name, ...);
sub IupSetAtt(Str                           $handle_name # const char*
             ,Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,Str                           $name # const char*
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:105
#IUP_API Ihandle*  IupSetAttributes (Ihandle* ih, const char *str);
sub IupSetAttributes(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                    ,Str                           $str # const char*
                     ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:106
#IUP_API char*     IupGetAttributes (Ihandle* ih);
sub IupGetAttributes(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                     ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:108
#IUP_API void      IupSetAttribute   (Ihandle* ih, const char* name, const char* value);
sub IupSetAttribute(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                   ,Str                           $name # const char*
                   ,Str                           $value # const char*
                    ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:109
#IUP_API void      IupSetStrAttribute(Ihandle* ih, const char* name, const char* value);
sub IupSetStrAttribute(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                      ,Str                           $name # const char*
                      ,Str                           $value # const char*
                       ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:110
#IUP_API void      IupSetStrf        (Ihandle* ih, const char* name, const char* format, ...);
sub IupSetStrf(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
              ,Str                           $name # const char*
              ,Str                           $format # const char*
               ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:111
#IUP_API void      IupSetInt         (Ihandle* ih, const char* name, int value);
sub IupSetInt(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,Str                           $name # const char*
             ,int32                         $value # int
              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:112
#IUP_API void      IupSetFloat       (Ihandle* ih, const char* name, float value);
sub IupSetFloat(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
               ,Str                           $name # const char*
               ,num32                         $value # float
                ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:113
#IUP_API void      IupSetDouble      (Ihandle* ih, const char* name, double value);
sub IupSetDouble(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Str                           $name # const char*
                ,num64                         $value # double
                 ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:114
#IUP_API void      IupSetRGB         (Ihandle* ih, const char* name, unsigned char r, unsigned char g, unsigned char b);
sub IupSetRGB(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,Str                           $name # const char*
             ,uint8                         $r # unsigned char
             ,uint8                         $g # unsigned char
             ,uint8                         $b # unsigned char
              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:115
#IUP_API void      IupSetRGBA        (Ihandle* ih, const char* name, unsigned char r, unsigned char g, unsigned char b, unsigned char a);
sub IupSetRGBA(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
              ,Str                           $name # const char*
              ,uint8                         $r # unsigned char
              ,uint8                         $g # unsigned char
              ,uint8                         $b # unsigned char
              ,uint8                         $a # unsigned char
               ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:117
#IUP_API char*     IupGetAttribute(Ihandle* ih, const char* name);
sub IupGetAttribute(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                   ,Str                           $name # const char*
                    ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:118
#IUP_API int       IupGetInt      (Ihandle* ih, const char* name);
sub IupGetInt(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,Str                           $name # const char*
              ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:119
#IUP_API int       IupGetInt2     (Ihandle* ih, const char* name);
sub IupGetInt2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
              ,Str                           $name # const char*
               ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:120
#IUP_API int       IupGetIntInt   (Ihandle* ih, const char* name, int *i1, int *i2);
sub IupGetIntInt(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Str                           $name # const char*
                ,Pointer[int32]                $i1 # int*
                ,Pointer[int32]                $i2 # int*
                 ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:121
#IUP_API float     IupGetFloat    (Ihandle* ih, const char* name);
sub IupGetFloat(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
               ,Str                           $name # const char*
                ) is native(LIB) returns num32 is export { * }

#-From /usr/include/iup/iup.h:122
#IUP_API double    IupGetDouble(Ihandle* ih, const char* name);
sub IupGetDouble(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Str                           $name # const char*
                 ) is native(LIB) returns num64 is export { * }

#-From /usr/include/iup/iup.h:123
#IUP_API void      IupGetRGB      (Ihandle* ih, const char* name, unsigned char *r, unsigned char *g, unsigned char *b);
sub IupGetRGB(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
             ,Str                           $name # const char*
             ,Pointer[uint8]                $r # unsigned char*
             ,Pointer[uint8]                $g # unsigned char*
             ,Pointer[uint8]                $b # unsigned char*
              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:124
#IUP_API void      IupGetRGBA     (Ihandle* ih, const char* name, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
sub IupGetRGBA(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
              ,Str                           $name # const char*
              ,Pointer[uint8]                $r # unsigned char*
              ,Pointer[uint8]                $g # unsigned char*
              ,Pointer[uint8]                $b # unsigned char*
              ,Pointer[uint8]                $a # unsigned char*
               ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:126
#IUP_API void  IupSetAttributeId(Ihandle* ih, const char* name, int id, const char *value);
sub IupSetAttributeId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                     ,Str                           $name # const char*
                     ,int32                         $id # int
                     ,Str                           $value # const char*
                      ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:127
#IUP_API void  IupSetStrAttributeId(Ihandle* ih, const char* name, int id, const char *value);
sub IupSetStrAttributeId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                        ,Str                           $name # const char*
                        ,int32                         $id # int
                        ,Str                           $value # const char*
                         ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:128
#IUP_API void  IupSetStrfId(Ihandle* ih, const char* name, int id, const char* format, ...);
sub IupSetStrfId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Str                           $name # const char*
                ,int32                         $id # int
                ,Str                           $format # const char*
                 ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:129
#IUP_API void  IupSetIntId(Ihandle* ih, const char* name, int id, int value);
sub IupSetIntId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
               ,Str                           $name # const char*
               ,int32                         $id # int
               ,int32                         $value # int
                ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:130
#IUP_API void  IupSetFloatId(Ihandle* ih, const char* name, int id, float value);
sub IupSetFloatId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                 ,Str                           $name # const char*
                 ,int32                         $id # int
                 ,num32                         $value # float
                  ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:131
#IUP_API void  IupSetDoubleId(Ihandle* ih, const char* name, int id, double value);
sub IupSetDoubleId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                  ,Str                           $name # const char*
                  ,int32                         $id # int
                  ,num64                         $value # double
                   ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:132
#IUP_API void  IupSetRGBId(Ihandle* ih, const char* name, int id, unsigned char r, unsigned char g, unsigned char b);
sub IupSetRGBId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
               ,Str                           $name # const char*
               ,int32                         $id # int
               ,uint8                         $r # unsigned char
               ,uint8                         $g # unsigned char
               ,uint8                         $b # unsigned char
                ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:134
#IUP_API char*  IupGetAttributeId(Ihandle* ih, const char* name, int id);
sub IupGetAttributeId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                     ,Str                           $name # const char*
                     ,int32                         $id # int
                      ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:135
#IUP_API int    IupGetIntId(Ihandle* ih, const char* name, int id);
sub IupGetIntId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
               ,Str                           $name # const char*
               ,int32                         $id # int
                ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:136
#IUP_API float  IupGetFloatId(Ihandle* ih, const char* name, int id);
sub IupGetFloatId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                 ,Str                           $name # const char*
                 ,int32                         $id # int
                  ) is native(LIB) returns num32 is export { * }

#-From /usr/include/iup/iup.h:137
#IUP_API double IupGetDoubleId(Ihandle* ih, const char* name, int id);
sub IupGetDoubleId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                  ,Str                           $name # const char*
                  ,int32                         $id # int
                   ) is native(LIB) returns num64 is export { * }

#-From /usr/include/iup/iup.h:138
#IUP_API void   IupGetRGBId(Ihandle* ih, const char* name, int id, unsigned char *r, unsigned char *g, unsigned char *b);
sub IupGetRGBId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
               ,Str                           $name # const char*
               ,int32                         $id # int
               ,Pointer[uint8]                $r # unsigned char*
               ,Pointer[uint8]                $g # unsigned char*
               ,Pointer[uint8]                $b # unsigned char*
                ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:140
#IUP_API void  IupSetAttributeId2(Ihandle* ih, const char* name, int lin, int col, const char* value);
sub IupSetAttributeId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                      ,Str                           $name # const char*
                      ,int32                         $lin # int
                      ,int32                         $col # int
                      ,Str                           $value # const char*
                       ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:141
#IUP_API void  IupSetStrAttributeId2(Ihandle* ih, const char* name, int lin, int col, const char* value);
sub IupSetStrAttributeId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                         ,Str                           $name # const char*
                         ,int32                         $lin # int
                         ,int32                         $col # int
                         ,Str                           $value # const char*
                          ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:142
#IUP_API void  IupSetStrfId2(Ihandle* ih, const char* name, int lin, int col, const char* format, ...);
sub IupSetStrfId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                 ,Str                           $name # const char*
                 ,int32                         $lin # int
                 ,int32                         $col # int
                 ,Str                           $format # const char*
                  ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:143
#IUP_API void  IupSetIntId2(Ihandle* ih, const char* name, int lin, int col, int value);
sub IupSetIntId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Str                           $name # const char*
                ,int32                         $lin # int
                ,int32                         $col # int
                ,int32                         $value # int
                 ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:144
#IUP_API void  IupSetFloatId2(Ihandle* ih, const char* name, int lin, int col, float value);
sub IupSetFloatId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                  ,Str                           $name # const char*
                  ,int32                         $lin # int
                  ,int32                         $col # int
                  ,num32                         $value # float
                   ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:145
#IUP_API void  IupSetDoubleId2(Ihandle* ih, const char* name, int lin, int col, double value);
sub IupSetDoubleId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                   ,Str                           $name # const char*
                   ,int32                         $lin # int
                   ,int32                         $col # int
                   ,num64                         $value # double
                    ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:146
#IUP_API void  IupSetRGBId2(Ihandle* ih, const char* name, int lin, int col, unsigned char r, unsigned char g, unsigned char b);
sub IupSetRGBId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Str                           $name # const char*
                ,int32                         $lin # int
                ,int32                         $col # int
                ,uint8                         $r # unsigned char
                ,uint8                         $g # unsigned char
                ,uint8                         $b # unsigned char
                 ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:148
#IUP_API char*  IupGetAttributeId2(Ihandle* ih, const char* name, int lin, int col);
sub IupGetAttributeId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                      ,Str                           $name # const char*
                      ,int32                         $lin # int
                      ,int32                         $col # int
                       ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:149
#IUP_API int    IupGetIntId2(Ihandle* ih, const char* name, int lin, int col);
sub IupGetIntId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Str                           $name # const char*
                ,int32                         $lin # int
                ,int32                         $col # int
                 ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:150
#IUP_API float  IupGetFloatId2(Ihandle* ih, const char* name, int lin, int col);
sub IupGetFloatId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                  ,Str                           $name # const char*
                  ,int32                         $lin # int
                  ,int32                         $col # int
                   ) is native(LIB) returns num32 is export { * }

#-From /usr/include/iup/iup.h:151
#IUP_API double IupGetDoubleId2(Ihandle* ih, const char* name, int lin, int col);
sub IupGetDoubleId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                   ,Str                           $name # const char*
                   ,int32                         $lin # int
                   ,int32                         $col # int
                    ) is native(LIB) returns num64 is export { * }

#-From /usr/include/iup/iup.h:152
#IUP_API void   IupGetRGBId2(Ihandle* ih, const char* name, int lin, int col, unsigned char *r, unsigned char *g, unsigned char *b);
sub IupGetRGBId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Str                           $name # const char*
                ,int32                         $lin # int
                ,int32                         $col # int
                ,Pointer[uint8]                $r # unsigned char*
                ,Pointer[uint8]                $g # unsigned char*
                ,Pointer[uint8]                $b # unsigned char*
                 ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:154
#IUP_API void      IupSetGlobal  (const char* name, const char* value);
sub IupSetGlobal(Str                           $name # const char*
                ,Str                           $value # const char*
                 ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:155
#IUP_API void      IupSetStrGlobal(const char* name, const char* value);
sub IupSetStrGlobal(Str                           $name # const char*
                   ,Str                           $value # const char*
                    ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:156
#IUP_API char*     IupGetGlobal  (const char* name);
sub IupGetGlobal(Str $name # const char*
                 ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:158
#IUP_API Ihandle*  IupSetFocus     (Ihandle* ih);
sub IupSetFocus(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:159
#IUP_API Ihandle*  IupGetFocus     (void);
sub IupGetFocus(
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:160
#IUP_API Ihandle*  IupPreviousField(Ihandle* ih);
sub IupPreviousField(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                     ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:161
#IUP_API Ihandle*  IupNextField    (Ihandle* ih);
sub IupNextField(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:163
#IUP_API Icallback IupGetCallback (Ihandle* ih, const char *name);
sub IupGetCallback(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                  ,Str                           $name # const char*
                   ) is native(LIB) returns ( --> int32) is export { * }

#-From /usr/include/iup/iup.h:164
#IUP_API Icallback IupSetCallback (Ihandle* ih, const char *name, Icallback func);
sub IupSetCallback(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                  ,Str                           $name # const char*
                  ,&func ( --> int32) # Typedef<Icallback>->«F:int ( )*»
                   ) is native(LIB) returns ( --> int32) is export { * }

#-From /usr/include/iup/iup.h:165
#IUP_API Ihandle*  IupSetCallbacks(Ihandle* ih, const char *name, Icallback func, ...);
sub IupSetCallbacks(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                   ,Str                           $name # const char*
                   ,&func ( --> int32) # Typedef<Icallback>->«F:int ( )*»
                    ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:167
#IUP_API Icallback IupGetFunction(const char *name);
sub IupGetFunction(Str $name # const char*
                   ) is native(LIB) returns ( --> int32) is export { * }

#-From /usr/include/iup/iup.h:168
#IUP_API Icallback IupSetFunction(const char *name, Icallback func);
sub IupSetFunction(Str                           $name # const char*
                  ,&func ( --> int32) # Typedef<Icallback>->«F:int ( )*»
                   ) is native(LIB) returns ( --> int32) is export { * }

#-From /usr/include/iup/iup.h:170
#IUP_API Ihandle*  IupGetHandle    (const char *name);
sub IupGetHandle(Str $name # const char*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:171
#IUP_API Ihandle*  IupSetHandle    (const char *name, Ihandle* ih);
sub IupSetHandle(Str                           $name # const char*
                ,Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:172
#IUP_API int       IupGetAllNames  (char** names, int n);
sub IupGetAllNames(Pointer[Str]                  $names # char**
                  ,int32                         $n # int
                   ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:173
#IUP_API int       IupGetAllDialogs(char** names, int n);
sub IupGetAllDialogs(Pointer[Str]                  $names # char**
                    ,int32                         $n # int
                     ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:174
#IUP_API char*     IupGetName      (Ihandle* ih);
sub IupGetName(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
               ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:176
#IUP_API void      IupSetAttributeHandle(Ihandle* ih, const char* name, Ihandle* ih_named);
sub IupSetAttributeHandle(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                         ,Str                           $name # const char*
                         ,Ihandle_                      $ih_named # Typedef<Ihandle>->«Ihandle_»*
                          ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:177
#IUP_API Ihandle*  IupGetAttributeHandle(Ihandle* ih, const char* name);
sub IupGetAttributeHandle(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                         ,Str                           $name # const char*
                          ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:178
#IUP_API void      IupSetAttributeHandleId(Ihandle* ih, const char* name, int id, Ihandle* ih_named);
sub IupSetAttributeHandleId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                           ,Str                           $name # const char*
                           ,int32                         $id # int
                           ,Ihandle_                      $ih_named # Typedef<Ihandle>->«Ihandle_»*
                            ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:179
#IUP_API Ihandle*  IupGetAttributeHandleId(Ihandle* ih, const char* name, int id);
sub IupGetAttributeHandleId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                           ,Str                           $name # const char*
                           ,int32                         $id # int
                            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:180
#IUP_API void      IupSetAttributeHandleId2(Ihandle* ih, const char* name, int lin, int col, Ihandle* ih_named);
sub IupSetAttributeHandleId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                            ,Str                           $name # const char*
                            ,int32                         $lin # int
                            ,int32                         $col # int
                            ,Ihandle_                      $ih_named # Typedef<Ihandle>->«Ihandle_»*
                             ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:181
#IUP_API Ihandle*  IupGetAttributeHandleId2(Ihandle* ih, const char* name, int lin, int col);
sub IupGetAttributeHandleId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                            ,Str                           $name # const char*
                            ,int32                         $lin # int
                            ,int32                         $col # int
                             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:183
#IUP_API char*     IupGetClassName(Ihandle* ih);
sub IupGetClassName(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                    ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:184
#IUP_API char*     IupGetClassType(Ihandle* ih);
sub IupGetClassType(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                    ) is native(LIB) returns Str is export { * }

#-From /usr/include/iup/iup.h:185
#IUP_API int       IupGetAllClasses(char** names, int n);
sub IupGetAllClasses(Pointer[Str]                  $names # char**
                    ,int32                         $n # int
                     ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:186
#IUP_API int       IupGetClassAttributes(const char* classname, char** names, int n);
sub IupGetClassAttributes(Str                           $classname # const char*
                         ,Pointer[Str]                  $names # char**
                         ,int32                         $n # int
                          ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:187
#IUP_API int       IupGetClassCallbacks(const char* classname, char** names, int n);
sub IupGetClassCallbacks(Str                           $classname # const char*
                        ,Pointer[Str]                  $names # char**
                        ,int32                         $n # int
                         ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:188
#IUP_API void      IupSaveClassAttributes(Ihandle* ih);
sub IupSaveClassAttributes(Ihandle_ $ih # Typedef<Ihandle>->«Ihandle_»*
                           ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:189
#IUP_API void      IupCopyClassAttributes(Ihandle* src_ih, Ihandle* dst_ih);
sub IupCopyClassAttributes(Ihandle_                      $src_ih # Typedef<Ihandle>->«Ihandle_»*
                          ,Ihandle_                      $dst_ih # Typedef<Ihandle>->«Ihandle_»*
                           ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:190
#IUP_API void      IupSetClassDefaultAttribute(const char* classname, const char *name, const char* value);
sub IupSetClassDefaultAttribute(Str                           $classname # const char*
                               ,Str                           $name # const char*
                               ,Str                           $value # const char*
                                ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:191
#IUP_API int       IupClassMatch(Ihandle* ih, const char* classname);
sub IupClassMatch(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                 ,Str                           $classname # const char*
                  ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:193
#IUP_API Ihandle*  IupCreate (const char *classname);
sub IupCreate(Str $classname # const char*
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:194
#IUP_API Ihandle*  IupCreatev(const char *classname, void* *params);
sub IupCreatev(Str                           $classname # const char*
              ,Pointer[Pointer]              $params # void**
               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:195
#IUP_API Ihandle*  IupCreatep(const char *classname, void* first, ...);
sub IupCreatep(Str                           $classname # const char*
              ,Pointer                       $first # void*
               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:201
#IUP_API Ihandle*  IupFill (void);
sub IupFill(
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:202
#IUP_API Ihandle*  IupSpace(void);
sub IupSpace(
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:204
#IUP_API Ihandle*  IupRadio      (Ihandle* child);
sub IupRadio(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:205
#IUP_API Ihandle*  IupVbox       (Ihandle* child, ...);
sub IupVbox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:206
#IUP_API Ihandle*  IupVboxv      (Ihandle* *children);
sub IupVboxv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:207
#IUP_API Ihandle*  IupZbox       (Ihandle* child, ...);
sub IupZbox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:208
#IUP_API Ihandle*  IupZboxv      (Ihandle* *children);
sub IupZboxv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:209
#IUP_API Ihandle*  IupHbox       (Ihandle* child, ...);
sub IupHbox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:210
#IUP_API Ihandle*  IupHboxv      (Ihandle* *children);
sub IupHboxv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:212
#IUP_API Ihandle*  IupNormalizer (Ihandle* ih_first, ...);
sub IupNormalizer(Ihandle_ $ih_first # Typedef<Ihandle>->«Ihandle_»*
                  ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:213
#IUP_API Ihandle*  IupNormalizerv(Ihandle* *ih_list);
sub IupNormalizerv(Pointer[Ihandle_] $ih_list # Typedef<Ihandle>->«Ihandle_»**
                   ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:215
#IUP_API Ihandle*  IupCbox       (Ihandle* child, ...);
sub IupCbox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:216
#IUP_API Ihandle*  IupCboxv      (Ihandle* *children);
sub IupCboxv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:217
#IUP_API Ihandle*  IupSbox       (Ihandle* child);
sub IupSbox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:218
#IUP_API Ihandle*  IupSplit      (Ihandle* child1, Ihandle* child2);
sub IupSplit(Ihandle_                      $child1 # Typedef<Ihandle>->«Ihandle_»*
            ,Ihandle_                      $child2 # Typedef<Ihandle>->«Ihandle_»*
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:219
#IUP_API Ihandle*  IupScrollBox  (Ihandle* child);
sub IupScrollBox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:220
#IUP_API Ihandle*  IupFlatScrollBox(Ihandle* child);
sub IupFlatScrollBox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
                     ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:221
#IUP_API Ihandle*  IupGridBox    (Ihandle* child, ...);
sub IupGridBox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:222
#IUP_API Ihandle*  IupGridBoxv   (Ihandle* *children);
sub IupGridBoxv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:223
#IUP_API Ihandle*  IupMultiBox   (Ihandle* child, ...);
sub IupMultiBox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:224
#IUP_API Ihandle*  IupMultiBoxv  (Ihandle **children);
sub IupMultiBoxv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:225
#IUP_API Ihandle*  IupExpander(Ihandle* child);
sub IupExpander(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:226
#IUP_API Ihandle*  IupDetachBox  (Ihandle* child);
sub IupDetachBox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:227
#IUP_API Ihandle*  IupBackgroundBox(Ihandle* child);
sub IupBackgroundBox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
                     ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:229
#IUP_API Ihandle*  IupFrame      (Ihandle* child);
sub IupFrame(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:230
#IUP_API Ihandle*  IupFlatFrame  (Ihandle* child);
sub IupFlatFrame(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:232
#IUP_API Ihandle*  IupImage      (int width, int height, const unsigned char* pixels);
sub IupImage(int32                         $width # int
            ,int32                         $height # int
            ,Pointer[uint8]                $pixels # const unsigned char*
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:233
#IUP_API Ihandle*  IupImageRGB   (int width, int height, const unsigned char* pixels);
sub IupImageRGB(int32                         $width # int
               ,int32                         $height # int
               ,Pointer[uint8]                $pixels # const unsigned char*
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:234
#IUP_API Ihandle*  IupImageRGBA  (int width, int height, const unsigned char* pixels);
sub IupImageRGBA(int32                         $width # int
                ,int32                         $height # int
                ,Pointer[uint8]                $pixels # const unsigned char*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:236
#IUP_API Ihandle*  IupItem       (const char* title, const char* action);
sub IupItem(Str                           $title # const char*
           ,Str                           $action # const char*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:237
#IUP_API Ihandle*  IupSubmenu    (const char* title, Ihandle* child);
sub IupSubmenu(Str                           $title # const char*
              ,Ihandle_                      $child # Typedef<Ihandle>->«Ihandle_»*
               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:238
#IUP_API Ihandle*  IupSeparator  (void);
sub IupSeparator(
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:239
#IUP_API Ihandle*  IupMenu       (Ihandle* child, ...);
sub IupMenu(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:240
#IUP_API Ihandle*  IupMenuv      (Ihandle* *children);
sub IupMenuv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:242
#IUP_API Ihandle*  IupButton     (const char* title, const char* action);
sub IupButton(Str                           $title # const char*
             ,Str                           $action # const char*
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:243
#IUP_API Ihandle*  IupFlatButton (const char* title);
sub IupFlatButton(Str $title # const char*
                  ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:244
#IUP_API Ihandle*  IupFlatToggle (const char* title);
sub IupFlatToggle(Str $title # const char*
                  ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:245
#IUP_API Ihandle*  IupDropButton (Ihandle* dropchild);
sub IupDropButton(Ihandle_ $dropchild # Typedef<Ihandle>->«Ihandle_»*
                  ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:246
#IUP_API Ihandle*  IupFlatLabel  (const char* title);
sub IupFlatLabel(Str $title # const char*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:247
#IUP_API Ihandle*  IupFlatSeparator(void);
sub IupFlatSeparator(
                     ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:248
#IUP_API Ihandle*  IupCanvas     (const char* action);
sub IupCanvas(Str $action # const char*
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:249
#IUP_API Ihandle*  IupDialog     (Ihandle* child);
sub IupDialog(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:250
#IUP_API Ihandle*  IupUser       (void);
sub IupUser(
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:251
#IUP_API Ihandle*  IupThread     (void);
sub IupThread(
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:252
#IUP_API Ihandle*  IupLabel      (const char* title);
sub IupLabel(Str $title # const char*
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:253
#IUP_API Ihandle*  IupList       (const char* action);
sub IupList(Str $action # const char*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:254
#IUP_API Ihandle*  IupFlatList   (void);
sub IupFlatList(
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:255
#IUP_API Ihandle*  IupText       (const char* action);
sub IupText(Str $action # const char*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:256
#IUP_API Ihandle*  IupMultiLine  (const char* action);
sub IupMultiLine(Str $action # const char*
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:257
#IUP_API Ihandle*  IupToggle     (const char* title, const char* action);
sub IupToggle(Str                           $title # const char*
             ,Str                           $action # const char*
              ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:258
#IUP_API Ihandle*  IupTimer      (void);
sub IupTimer(
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:259
#IUP_API Ihandle*  IupClipboard  (void);
sub IupClipboard(
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:260
#IUP_API Ihandle*  IupProgressBar(void);
sub IupProgressBar(
                   ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:261
#IUP_API Ihandle*  IupVal        (const char *type);
sub IupVal(Str $type # const char*
           ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:262
#IUP_API Ihandle*  IupFlatVal    (const char *type);
sub IupFlatVal(Str $type # const char*
               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:263
#IUP_API Ihandle*  IupFlatTree   (void);
sub IupFlatTree(
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:264
#IUP_API Ihandle*  IupTabs       (Ihandle* child, ...);
sub IupTabs(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:265
#IUP_API Ihandle*  IupTabsv      (Ihandle* *children);
sub IupTabsv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:266
#IUP_API Ihandle*  IupFlatTabs   (Ihandle* first, ...);
sub IupFlatTabs(Ihandle_ $first # Typedef<Ihandle>->«Ihandle_»*
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:267
#IUP_API Ihandle*  IupFlatTabsv  (Ihandle* *children);
sub IupFlatTabsv(Pointer[Ihandle_] $children # Typedef<Ihandle>->«Ihandle_»**
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:268
#IUP_API Ihandle*  IupTree       (void);
sub IupTree(
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:269
#IUP_API Ihandle*  IupLink       (const char* url, const char* title);
sub IupLink(Str                           $url # const char*
           ,Str                           $title # const char*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:270
#IUP_API Ihandle*  IupAnimatedLabel(Ihandle* animation);
sub IupAnimatedLabel(Ihandle_ $animation # Typedef<Ihandle>->«Ihandle_»*
                     ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:271
#IUP_API Ihandle*  IupDatePick   (void);
sub IupDatePick(
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:272
#IUP_API Ihandle*  IupCalendar   (void);
sub IupCalendar(
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:273
#IUP_API Ihandle*  IupColorbar   (void);
sub IupColorbar(
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:274
#IUP_API Ihandle*  IupGauge      (void);
sub IupGauge(
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:275
#IUP_API Ihandle*  IupDial       (const char* type);
sub IupDial(Str $type # const char*
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:276
#IUP_API Ihandle*  IupColorBrowser(void);
sub IupColorBrowser(
                    ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:279
#/* Old controls, use SPIN attribute of IupText */
#IUP_API Ihandle*  IupSpin       (void);
sub IupSpin(
            ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:280
#IUP_API Ihandle*  IupSpinbox    (Ihandle* child);
sub IupSpinbox(Ihandle_ $child # Typedef<Ihandle>->«Ihandle_»*
               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:288
#/* String compare utility */
#IUP_API int IupStringCompare(const char* str1, const char* str2, int casesensitive, int lexicographic);
sub IupStringCompare(Str                           $str1 # const char*
                    ,Str                           $str2 # const char*
                    ,int32                         $casesensitive # int
                    ,int32                         $lexicographic # int
                     ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:291
#/* IupImage utilities */
#IUP_API int IupSaveImageAsText(Ihandle* ih, const char* filename, const char* format, const char* name);
sub IupSaveImageAsText(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                      ,Str                           $filename # const char*
                      ,Str                           $format # const char*
                      ,Str                           $name # const char*
                       ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:292
#IUP_API Ihandle* IupImageGetHandle(const char* name);
sub IupImageGetHandle(Str $name # const char*
                      ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:295
#/* IupText and IupScintilla utilities */
#IUP_API void  IupTextConvertLinColToPos(Ihandle* ih, int lin, int col, int *pos);
sub IupTextConvertLinColToPos(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                             ,int32                         $lin # int
                             ,int32                         $col # int
                             ,Pointer[int32]                $pos # int*
                              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:296
#IUP_API void  IupTextConvertPosToLinCol(Ihandle* ih, int pos, int *lin, int *col);
sub IupTextConvertPosToLinCol(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                             ,int32                         $pos # int
                             ,Pointer[int32]                $lin # int*
                             ,Pointer[int32]                $col # int*
                              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:299
#/* IupText, IupList, IupTree, IupMatrix and IupScintilla utility */
#IUP_API int   IupConvertXYToPos(Ihandle* ih, int x, int y);
sub IupConvertXYToPos(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                     ,int32                         $x # int
                     ,int32                         $y # int
                      ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:302
#/* OLD names, kept for backward compatibility, will never be removed. */
#IUP_API void IupStoreGlobal(const char* name, const char* value);
sub IupStoreGlobal(Str                           $name # const char*
                  ,Str                           $value # const char*
                   ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:303
#IUP_API void IupStoreAttribute(Ihandle* ih, const char* name, const char* value);
sub IupStoreAttribute(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                     ,Str                           $name # const char*
                     ,Str                           $value # const char*
                      ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:304
#IUP_API void IupSetfAttribute(Ihandle* ih, const char* name, const char* format, ...);
sub IupSetfAttribute(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                    ,Str                           $name # const char*
                    ,Str                           $format # const char*
                     ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:305
#IUP_API void IupStoreAttributeId(Ihandle* ih, const char* name, int id, const char *value);
sub IupStoreAttributeId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                       ,Str                           $name # const char*
                       ,int32                         $id # int
                       ,Str                           $value # const char*
                        ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:306
#IUP_API void IupSetfAttributeId(Ihandle* ih, const char* name, int id, const char* f, ...);
sub IupSetfAttributeId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                      ,Str                           $name # const char*
                      ,int32                         $id # int
                      ,Str                           $f # const char*
                       ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:307
#IUP_API void IupStoreAttributeId2(Ihandle* ih, const char* name, int lin, int col, const char* value);
sub IupStoreAttributeId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                        ,Str                           $name # const char*
                        ,int32                         $lin # int
                        ,int32                         $col # int
                        ,Str                           $value # const char*
                         ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:308
#IUP_API void IupSetfAttributeId2(Ihandle* ih, const char* name, int lin, int col, const char* format, ...);
sub IupSetfAttributeId2(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                       ,Str                           $name # const char*
                       ,int32                         $lin # int
                       ,int32                         $col # int
                       ,Str                           $format # const char*
                        ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:311
#/* IupTree and IupFlatTree utilities (work for both) */
#IUP_API int   IupTreeSetUserId(Ihandle* ih, int id, void* userid);
sub IupTreeSetUserId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                    ,int32                         $id # int
                    ,Pointer                       $userid # void*
                     ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:312
#IUP_API void* IupTreeGetUserId(Ihandle* ih, int id);
sub IupTreeGetUserId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                    ,int32                         $id # int
                     ) is native(LIB) returns Pointer is export { * }

#-From /usr/include/iup/iup.h:313
#IUP_API int   IupTreeGetId(Ihandle* ih, void *userid);
sub IupTreeGetId(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                ,Pointer                       $userid # void*
                 ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:314
#IUP_API void  IupTreeSetAttributeHandle(Ihandle* ih, const char* name, int id, Ihandle* ih_named); /* deprecated, use IupSetAttributeHandleId */
sub IupTreeSetAttributeHandle(Ihandle_                      $ih # Typedef<Ihandle>->«Ihandle_»*
                             ,Str                           $name # const char*
                             ,int32                         $id # int
                             ,Ihandle_                      $ih_named # Typedef<Ihandle>->«Ihandle_»*
                              ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:321
#IUP_API Ihandle* IupFileDlg(void);
sub IupFileDlg(
               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:322
#IUP_API Ihandle* IupMessageDlg(void);
sub IupMessageDlg(
                  ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:323
#IUP_API Ihandle* IupColorDlg(void);
sub IupColorDlg(
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:324
#IUP_API Ihandle* IupFontDlg(void);
sub IupFontDlg(
               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:325
#IUP_API Ihandle* IupProgressDlg(void);
sub IupProgressDlg(
                   ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:327
#IUP_API int  IupGetFile(char *arq);
sub IupGetFile(Str $arq # char*
               ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:328
#IUP_API void IupMessage(const char *title, const char *msg);
sub IupMessage(Str                           $title # const char*
              ,Str                           $msg # const char*
               ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:329
#IUP_API void IupMessagef(const char *title, const char *format, ...);
sub IupMessagef(Str                           $title # const char*
               ,Str                           $format # const char*
                ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:330
#IUP_API void IupMessageError(Ihandle* parent, const char* message);
sub IupMessageError(Ihandle_                      $parent # Typedef<Ihandle>->«Ihandle_»*
                   ,Str                           $message # const char*
                    ) is native(LIB)  is export { * }

#-From /usr/include/iup/iup.h:331
#IUP_API int IupMessageAlarm(Ihandle* parent, const char* title, const char *message, const char *buttons);
sub IupMessageAlarm(Ihandle_                      $parent # Typedef<Ihandle>->«Ihandle_»*
                   ,Str                           $title # const char*
                   ,Str                           $message # const char*
                   ,Str                           $buttons # const char*
                    ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:332
#IUP_API int  IupAlarm(const char *title, const char *msg, const char *b1, const char *b2, const char *b3);
sub IupAlarm(Str                           $title # const char*
            ,Str                           $msg # const char*
            ,Str                           $b1 # const char*
            ,Str                           $b2 # const char*
            ,Str                           $b3 # const char*
             ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:333
#IUP_API int  IupScanf(const char *format, ...);
sub IupScanf(Str $format # const char*
             ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:334
#IUP_API int  IupListDialog(int type, const char *title, int size, const char** list,
sub IupListDialog(int32                         $type # int
                 ,Str                           $title # const char*
                 ,int32                         $size # int
                 ,Pointer[Str]                  $list # const char**
                 ,int32                         $op # int
                 ,int32                         $max_col # int
                 ,int32                         $max_lin # int
                 ,Pointer[int32]                $marks # int*
                  ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:336
#IUP_API int  IupGetText(const char* title, char* text, int maxsize);
sub IupGetText(Str                           $title # const char*
              ,Str                           $text # char*
              ,int32                         $maxsize # int
               ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:337
#IUP_API int  IupGetColor(int x, int y, unsigned char* r, unsigned char* g, unsigned char* b);
sub IupGetColor(int32                         $x # int
               ,int32                         $y # int
               ,Pointer[uint8]                $r # unsigned char*
               ,Pointer[uint8]                $g # unsigned char*
               ,Pointer[uint8]                $b # unsigned char*
                ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:340
#IUP_API int IupGetParam(const char* title, Iparamcb action, void* user_data, const char* format,...);
sub IupGetParam(Str                           $title # const char*
               ,&action ( --> int32) # Typedef<Iparamcb>->«F:int ( )*»
               ,Pointer                       $user_data # void*
               ,Str                           $format # const char*
                ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:341
#IUP_API int IupGetParamv(const char* title, Iparamcb action, void* user_data, const char* format, int param_count, int param_extra, void** param_data);
sub IupGetParamv(Str                           $title # const char*
                ,&action ( --> int32) # Typedef<Iparamcb>->«F:int ( )*»
                ,Pointer                       $user_data # void*
                ,Str                           $format # const char*
                ,int32                         $param_count # int
                ,int32                         $param_extra # int
                ,Pointer[Pointer]              $param_data # void**
                 ) is native(LIB) returns int32 is export { * }

#-From /usr/include/iup/iup.h:342
#IUP_API Ihandle* IupParam(const char* format);
sub IupParam(Str $format # const char*
             ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:343
#IUP_API Ihandle*  IupParamBox(Ihandle* param, ...);
sub IupParamBox(Ihandle_ $param # Typedef<Ihandle>->«Ihandle_»*
                ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:344
#IUP_API Ihandle*  IupParamBoxv(Ihandle* *param_array);
sub IupParamBoxv(Pointer[Ihandle_] $param_array # Typedef<Ihandle>->«Ihandle_»**
                 ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:346
#IUP_API Ihandle* IupLayoutDialog(Ihandle* dialog);
sub IupLayoutDialog(Ihandle_ $dialog # Typedef<Ihandle>->«Ihandle_»*
                    ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:347
#IUP_API Ihandle* IupElementPropertiesDialog(Ihandle* parent, Ihandle* elem);
sub IupElementPropertiesDialog(Ihandle_                      $parent # Typedef<Ihandle>->«Ihandle_»*
                              ,Ihandle_                      $elem # Typedef<Ihandle>->«Ihandle_»*
                               ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:348
#IUP_API Ihandle* IupGlobalsDialog(void);
sub IupGlobalsDialog(
                     ) is native(LIB) returns Ihandle_ is export { * }

#-From /usr/include/iup/iup.h:349
#IUP_API Ihandle* IupClassInfoDialog(Ihandle* parent);
sub IupClassInfoDialog(Ihandle_ $parent # Typedef<Ihandle>->«Ihandle_»*
                       ) is native(LIB) returns Ihandle_ is export { * }

## Externs

